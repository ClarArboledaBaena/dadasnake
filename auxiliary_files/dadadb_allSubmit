#! /bin/bash -i

usage() {
    echo "Usage: $0 [-u] [-c] [-l] [-a emailAddress] [-t taxname] [-x region] [-e evalue] [-p primer] [-q primer2] [-m mismatches] -i /absolute_path/to/inputs -o /absolute_path/to/outputs " 1>&2
    echo "       -a <emailAddress>, address to send email about start and end to" 1>&2
    echo "       -t <taxname>, filters database by a pattern in the taxonomy file" 1>&2
    echo "       -x <ITSx region>, filters database by ITSx region (fungi only)" 1>&2
    echo "       -e <evalue for ITS>, only works with -x" 1>&2
    echo "       -p <forward primer>, filters database by primer presence, only works with -q" 1>&2
    echo "       -q <reverse primer>, filters database by primer presence, only works with -p" 1>&2
    echo "       -m <mismatch proportion>, only works with -q and -p" 1>&2
    echo "       -c if set, the whole thing is submitted to the cluster" 1>&2
    echo "       -l if set, the main snakemake thread and indivdual rules are run in the current terminal session" 1>&2

}

while getopts ui:o:a:t:x:e:p:q:m:hcl flag
do
    case $flag in
        u)
            UNLOCK=true;;
        i)
            INPUT=$OPTARG;;
        o)
            OUTPUT=$OPTARG;;
        a)
            EMAIL=$OPTARG;;
        t)
            TAXNAME=$OPTARG;;
        x)
            REGION=$OPTARG;;
        e)
            EVALUE=$OPTARG;;
        p)
            FWD=$OPTARG;;
        q)
            RVS=$OPTARG;;
        m)
            MISM=$OPTARG;;
        c)
            CLUSTER=true;;
        l)
            LAPTOP=true;;
        h)
            usage
            exit;;
        *)  
            echo "Unimplemented option: -$OPTARG" >&2 
            usage
            exit 1;;
        :) 
            echo "Missing option argument for -$OPTARG" >&2 
            usage
            exit 1;;
        ?)
            usage
            exit
             ;;
    esac
done

shift $((OPTIND-1))

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

#missing input
if [ -z "$INPUT" ]; then
    echo "missing input"
    usage
    exit 1
else
    DB=$INPUT.fasta
    TAX=$INPUT.taxonomy
fi

#if the file cannot be found
if [[ !  -e "$DB" ]]; then
   echo "Database "$DB" was not found."
   echo "Provide full path without suffix."
   exit 1
fi
if [[ !  -e "$TAX" ]]; then
   echo "Taxonomy "$TAX" was not found."
   echo "Provide full path without suffix."
   exit 1
fi

if [ ! -z $TAXNAME ] && [ ! -z $REGION ]
  then
  echo "-t and -x given, can only do one thing at a time"
  exit 1
elif [ ! -z $TAXNAME ] && [ ! -z $FWD ]
  then
  echo "-t and -p given, can only do one thing at a time"
  exit 1
elif [ ! -z $REGION ] && [ ! -z $FWD ]
  then
  echo "-x and -p given, can only do one thing at a time"
  exit 1
fi

if [ -z "$EMAIL" ]; then
    echo "no email address given, you will not be notified about progress"
    EMAIL=""
fi

#missing output
if [ -z "$OUTPUT" ]; then
    echo "missing output"
    if [ ! -z $TAXNAME ]
    then
      NAMER=$TAXNAME
    elif [ ! -z $REGION ]
      then
      NAMER=$REGION
    else
      NAMER=$FWD.$RVS
    fi
    OUTPUT=$INPUT.$NAMER
    echo "outputs named $OUTPUT.fasta and $OUTPUT.taxonomy"
    if [ -f $OUTPUT.fasta ]
       then
       echo "The database $OUTPUT.fasta already exist."
       usage
       exit 1
    elif [ -f $OUTPUT.taxonomy ]
       then
       echo "The taxonomy file $OUTPUT.taxonomy already exists."
       usage
       exit 0
    fi
fi
DB_OUT=$OUTPUT.fasta
TAX_OUT=$OUTPUT.taxonomy

if [ ! -z $TAXNAME ]
then
  WF="tax"
elif [ ! -z $REGION ]
then
  WF="ITSx"
  if [ -z $EVALUE ]
    then
    EVALUE=0.01
  fi
elif [ ! -z $FWD ] || [ ! -z $RVS ]
then
  if [ ! -z $FWD ] && [ -z $RVS ]
  then
    echo "missing input -q, need two primers"
    exit 1
  elif [ -z $FWD ] && [ ! -z $RVS ]
  then
    echo "missing input -p, need two primers"
    exit 1
  fi
  WF="primers"
  FWD_RC=`echo $FWD | tr ["ATCGUatcguRYKMBDHVrykmbdhv"] ["TAGCATAGCAYRMKVHDBYRMKVHDB"] | rev`
  RVS_RC=`echo $RVS | tr ["ATCGUatcguRYKMBDHVrykmbdhv"] ["TAGCATAGCAYRMKVHDBYRMKVHDB"] | rev`
  if [ -z $MISM ]
  then
    MISM=0.2
  fi
else
  echo "nothing to be done"
  exit 0
fi

if [ -z $REGION ]
then
  REGION="x"
fi
if [ -z $EVALUE ]
then
  EVALUE="0.1"
fi
if [ -z $FWD ]
then
  FWD="x"
  RVS="x"
  FWD_RC="x"
  RVS_RC="x"
fi
if [ -z $TAXNAME ]
then
  TAXNAME="x"
fi
if [ -z $MISM ]
then
  MISM="x"
fi


START_TIME=`date +%s`
NAMEHASH=`echo $START_TIME| cksum | awk '{print $1}'`
INPUT_BASE_t=$(basename $INPUT)
INPUT_BASE=${INPUT_BASE_t//./_}
JNAME="DBfilter_${INPUT_BASE}_${WF}_${NAMEHASH}"
JNAME=${JNAME//./_}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
VARCONFIG=$DIR/VARIABLE_CONFIG

while IFS=$'\t' read var val; do unset $var ; declare $var="$val" ; done < $VARCONFIG
if [ "$SNAKEMAKE_VIA_CONDA" = true ]; then
   CONDA_START="conda activate $DIR/conda/snakemake_env"
   CONDA_END="conda deactivate"
else
   CONDA_START=""
   CONDA_END=""
fi

if [ "$UNLOCK" = true ]; then
    echo "Unlocking working directory."
    eval $LOADING_MODULES
    eval $CONDA_START
    
    snakemake -j 1 -s $DIR/DB_snakefile --unlock --config what=$WF email=$EMAIL sessionName=$JNAME region=$REGION evalue=$EVALUE fwd=$FWD rvs=$RVS fwd_rc=$FWD_RC rvs_rc=$RVS_RC mismatch=$MISM tax=$TAXNAME input_tax=$TAX input_DB=$DB output_tax=$TAX_OUT output_DB=$DB_OUT

elif [ "$CLUSTER" = true ]; then

  echo "Submitting DB job ${JNAME} to cluster."
  eval "${SUBMIT_COMMAND} $DIR/submit_scripts/dadadb.sh $VARCONFIG $JNAME $WG $EMAIL $REGION $EVALUE $FWD $RVS $FWD_RC $RVS_RC $MISM $TAXNAME $TAX $DB $TAX_OUT $DB_OUT"

elif [ "$LAPTOP" = true ]; then
  echo "Running workflow in current session - don't use this setting except with small datasets."
  eval $LOADING_MODULES
  eval $CONDA_START
  CMD="snakemake -j 1 -s $DIR/DB_snakefile --config what=$WF email=$EMAIL sessionName=$JNAME region=$REGION evalue=$EVALUE fwd=$FWD rvs=$RVS fwd_rc=$FWD_RC rvs_rc=$RVS_RC mismatch=$MISM tax=$TAXNAME input_tax=$TAX input_DB=$DB output_tax=$TAX_OUT output_DB=$DB_OUT --use-conda --conda-prefix $DIR/conda $DB_OUT $TAX_OUT"
  echo $CMD
  eval $CMD
else
  echo "Nothing was done, please give -u, -c, or -l to start anything."
fi

